<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="installation" xmlns="http://docbook.org/ns/docbook" version="5.0" >
  <title>GNSS Receivers</title>
  <section xml:id="chap_rec_01"><title>Introduction</title>
    <para>To describe a GNSS receiver, we use the IGS standards; all information
      presented here, is recorded in the 
      <ulink url='https://igscb.jpl.nasa.gov/igscb/station/general/rcvr_ant.tab'>rcvr_ant.tab</ulink>
      document maintained by IGS.</para>
    </section>
      <section xml:id="chap_rec_02"><title>Receiver Representation</title>
        <para>According to the IGS convention, a GNSS receiver can be represented by
        a string of (maximum) 20 columns. One [white]space between manufacturer name 
        and model name is inserted. Valid characters in model name include: 
        <itemizedlist mark='opencircle'>
          <listitem><para><userinput>A-Z</userinput> i.e. all uppercase letters,</para></listitem>
          <listitem><para><userinput>0-9</userinput> i.e. all integers,</para></listitem>
          <listitem><para><userinput>space</userinput> i.e. whitespace characters,</para></listitem>
          <listitem><para><userinput>-_+</userinput>i.e. the characters '+', '-' and '_'</para></listitem>
        </itemizedlist>
      </para>
      <para> The following receivers are example cases of valid models, recorded in
        <ulink url='https://igscb.jpl.nasa.gov/igscb/station/general/rcvr_ant.tab'>rcvr_ant.tab</ulink>:
        <example xml:id="rec.receiverex1">
          <title>Valid GNSS Receivers</title>
          <screen>
            +----------------------+-------------------------------------------------------+
            | ASHTECH Receivers    |                                                       |
            | IGS Codes-20 columns |                      Description                      |
            | XXXXXXXXXXXXXXXXXXXX |                                                       |
            +----------------------+-------------------------------------------------------+
            | ASHTECH xxxxxxxx     | Note: Ashtech receiver types xxxxxxxx are passed      |
            |                      |  automatically through firmware to S- and B-files     |
            | ASHTECH 3DF-XXIV     |  4x6 channel, L1 only                                 |
            | ASHTECH 802147_A     |  ProMark 800, 120 channels GPS L1/L2/L5, GLONASS,     |
            |                      |   Galileo, SBAS integrated receiver/antenna           |
            | ASHTECH D-XII        |  12  channel, L1 only                                 |

            | JAVAD Receivers      |                                                       |
            | IGS Codes-20 columns |                      Description                      |
            | XXXXXXXXXXXXXXXXXXXX |                                                       |
            +----------------------+-------------------------------------------------------+
            | JAVAD DUO_G2         | 216 channels GPS L1, Galileo E1                       |
            | JAVAD DUO_G2 DELTA   | 216 channels GPS L1, Galileo E1                       |
            | JAVAD DUO_G2 SIGMA   | 216 channels GPS L1, Galileo E1                       |

            | LEICA Receivers      |                                                       |
            | IGS Codes-20 columns |                      Description                      |
            | XXXXXXXXXXXXXXXXXXXX |                                                       |
            +----------------------+-------------------------------------------------------+
            | LEICA ATX1230        |  12 channel L1/L2 receiver, Smartantenna              |
            | LEICA ATX1230+GNSS   |  120 channel GPS L1/L2/L5, GLONASS, Galileo, BeiDou   |
            |                      |  Smartantenna                                         |
            | LEICA CRS1000        |  12 channel L1/L2, continuous reference station       |
            | LEICA GG02PLUS       |  72 channel GPS L1/L2, GLONASS GNSS/GIS Smartantenna  |
          </screen>
        </example>
    </para>
  </section>
  <section xml:id="chap_rec_03"><title>Usage</title>
    <para>The (GNSS) Receiver class is declared in the header file 
      <filename class='headerfile'>src/receiver.hpp</filename>, while the definition source 
      file is <filename class='cppfile'>src/receiver.cpp</filename>. Example usage of the 
      class is made available in the <filename class='cppfile'>test/test_receiver.cpp</filename> 
      file.</para>
    <important><para>The <classname>Receiver</classname> class is contained in the
        <classname>ngpt</classname> namespace.</para></important>

    <para>To use the class, you will need to include the header file 
      <filename class='headerfile'>receiver.hpp</filename>. Construction of an instance 
      of the <classname>Receiver</classname> class, can be achieved either with an 
      <classname>std::string</classname> or a <classname>c-string</classname>. For 
      example: 
      <example xml:id="rec_ex1"><title><classname>Receiver</classname> Construction</title> 
        <programlisting linenumbering='numbered'> 
          #include "receiver.hpp" 
          // ...

          using ngpt::Receiver;

          /*
          ...
           */
          Receiver recvr_1 ( "JAVAD TR_G4 ALPHA" ); // from c-str
          Receiver recvr_2 ( std::string( "JAVAD TR_G4 ALPHA" ) ); // from std::string
          /*
          ...
          */
    </programlisting></example></para>

    <para>You can also assign a <classname>Receiver</classname> to an 
      <classname>std::string</classname> or <classname>a c-string</classname>. 
      This sounds weird, but comes handy:
      <example xml:id="rec_ex2"><title><classname>Receiver</classname> Assignment</title>
        <programlisting linenumbering='numbered'> 
          #include "receiver.hpp" 
          // ...

          using ngpt::Receiver;

          /*
          ...
          */
          Receiver recvr_1, recvr_2;
          recvr_1 = "JAVAD TR_G4 ALPHA";
          recvr_2 = std::string( "JAVAD TR_G4 ALPHA" ); 
          /*
          ...
          */
  </programlisting></example></para>
</section>

<section xml:id="chap_rec_04"><title>Implementation</title>
  <para><classname>Receiver</classname> is a very simple, elementary class; each instance
    only stores an array (or more precisely a <classname>c-string</classname>) 
    of 21 characters.
    <important><para>The size (in characters) of the <classname>c-string</classname>
    representing the receiver name is always: 20 + 1. We need 20 characters
    for the name and one for the terminating character (i.e. <parameter>'\0'</parameter>).
    </para></important>
    </para>
  <para>The size of the stored array is always reffered to using a constant, hiden in
    a namespace (the same goes for the array size in bytes);
      <example xml:id="rec_ex3"><title><classname>Receiver</classname> Constants</title>
        <programlisting linenumbering='numbered'>
        /// Namespace to hide receiver specific details.
        namespace receiver_details
        {
            /// Maximum number of characters describing a GNSS receiver.
            /// \warning The character '\0' is not included.
            ///
            constexpr std::size_t receiver_max_chars { 20 };

            /// Maximum size of a char array, holding any receiver (in bytes).
            /// \warning The character '\0' is not included.
            ///
            constexpr std::size_t receiver_max_bytes
            { receiver_max_chars * sizeof(char) };

            /// Better be safe than sorry ...
            static_assert(receiver_max_bytes >= receiver_max_chars, 
                "Receiver size in bytes &lt; Receiver size ?!?");
        }
    </programlisting></example>
    Never use the number 20 (or 21) to refer to the size of the character array; always
    use <parameter>receiver_details::receiver_max_chars</parameter> to refer to the
    (maximum) size of the character array (and <parameter>receiver_details::receiver_max_bytes</parameter>
    for the size in bytes).</para>
  <para>One ambiguous decision, is to define assignment operators using (as the
    right operand) a <classname>std::string</classname> or a <classname>c-string</classname>
    (see <xref linkend="rec_ex2"/>). This could potentialy lead to misuse, but it
    really is handy!.</para>

  <para>As mentioned, a <classname>Receiver</classname> instance can hold up to
    <parameter>receiver_details::receiver_max_chars</parameter> characters. That 
    means, that if a <classname>Receiver</classname> is assigned a model name larger
    than <parameter>receiver_details::receiver_max_chars</parameter> (in characters), 
    then the name will be truncated. On the other hand, if the assigned is less
    than <parameter>receiver_details::receiver_max_chars</parameter> characters,
    all unused character fields will be set to <parameter>'\0'</parameter> (this
    is also what happens when a <classname>Receiver</classname> is zero-initialized).</para>
</section>
<section xml:id="chap_rec_05"><title>Examples</title>
  <para>The following is a close copy of the example file <filename class='cppfile'>test/test_receiver.cpp</filename>
    which shows how to use the class.
    <example xml:id="rec_ex4"><title><classname>Receiver</classname> Example</title>
      <programlisting linenumbering='numbered'>
        #include &lt;iostream&gt;
        #include &lt;climits&gt;
        #include "receiver.hpp"

        using namespace ngpt;

        int main ()
        {

        /*
         * Construct some Receiver instances, using various
         * constructors.
         */
        std::string srec { " GEODETIC III L1/L2   " };
        char buf[] = {"JAVAD TR_G3 ALPHA                   FOO             BAR"};
        Receiver r1 { "JAVAD TR_G3 ALPHA    " };
        Receiver r2 { "JAVAD TR_G4 ALPHA" };
        Receiver r3 { buf };
        Receiver r4 { srec };
        Receiver r5 { std::string("JAVAD TR_G3 ALPHA tooooolongstring..") };

        // using the assignment operator
        Receiver r6, r7;
        r6 = "JAVAD TR_G3 ALPHA                   FOO             BAR";
        r7 = std::string("JAVAD TR");
        
        // Print the receiver names
        std::cout&lt;&lt;"Receiver r1 type: ["&lt;&lt; r1.toString() &lt;&lt; "]";
        std::cout&lt;&lt;"\nReceiver r2 type: ["&lt;&lt; r2.toString() &lt;&lt; "]";
        std::cout&lt;&lt;"\nReceiver r3 type: ["&lt;&lt; r3.toString() &lt;&lt; "]";
        std::cout&lt;&lt;"\nReceiver r4 type: ["&lt;&lt; r4.toString() &lt;&lt; "]";
        std::cout&lt;&lt;"\nReceiver r5 type: ["&lt;&lt; r5.toString() &lt;&lt; "]";
        std::cout&lt;&lt;"\nReceiver r6 type: ["&lt;&lt; r6.toString() &lt;&lt; "]";
        std::cout&lt;&lt;"\nReceiver r7 type: ["&lt;&lt; r7.toString() &lt;&lt; "]";
        
        // Check wether some receivers are the same
        std::cout&lt;&lt;"\nAre r1 and r2 the same ? " &lt;&lt; ( (r1==r2)?"yes":"no" );
        std::cout&lt;&lt;"\nAre r1 and r3 the same ? " &lt;&lt; ( (r1==r3)?"yes":"no" );
        std::cout&lt;&lt;"\nAre r1 and r4 the same ? " &lt;&lt; ( (r1==r4)?"yes":"no" );
        
        // Print the size of each instance
        std::cout&lt;&lt;"\nSize of receiver object = " &lt;&lt; sizeof(r1)  
          &lt;&lt; " bytes or " &lt;&lt; sizeof(r1)*CHAR_BIT &lt;&lt; " bits";

        // validate receiver models.
        std::cout&lt;&lt;"\nIs ["&lt;&lt; r1.toString() &lt;&lt; "] a valid name ? " &lt;&lt; ( (r1.validate())?"yes":"no" );
        std::cout&lt;&lt;"\nIs ["&lt;&lt; r2.toString() &lt;&lt; "] a valid name ? " &lt;&lt; ( (r2.validate())?"yes":"no" );
        std::cout&lt;&lt;"\nIs ["&lt;&lt; r3.toString() &lt;&lt; "] a valid name ? " &lt;&lt; ( (r3.validate())?"yes":"no" );
        std::cout&lt;&lt;"\nIs ["&lt;&lt; r4.toString() &lt;&lt; "] a valid name ? " &lt;&lt; ( (r4.validate())?"yes":"no" );
        std::cout&lt;&lt;"\nIs ["&lt;&lt; r5.toString() &lt;&lt; "] a valid name ? " &lt;&lt; ( (r5.validate())?"yes":"no" );
        std::cout&lt;&lt;"\nIs ["&lt;&lt; r6.toString() &lt;&lt; "] a valid name ? " &lt;&lt; ( (r6.validate())?"yes":"no" );
        std::cout&lt;&lt;"\nIs ["&lt;&lt; r7.toString() &lt;&lt; "] a valid name ? " &lt;&lt; ( (r7.validate())?"yes":"no" );

        /* Print the size of each instance */
        std::cout&lt;&lt;"\nSize of receiver object = " &lt;&lt; sizeof(r1)  
                      &lt;&lt; " bytes or " &lt;&lt; sizeof(r1)*CHAR_BIT &lt;&lt; " bits";

        std::cout&lt;&lt;"\n";
        return 0;
        }
        </programlisting></example></para>

  <para>Compiling &amp; running the above (<prompt>$></prompt> <userinput>test/testReceiver</userinput>), will produce the following output
    <screen>
      Receiver r1 type: [JAVAD TR_G3 ALPHA   ]
      Receiver r2 type: [JAVAD TR_G4 ALPHA]
      Receiver r3 type: [JAVAD TR_G3 ALPHA   ]
      Receiver r4 type: [ GEODETIC III L1/L2 ]
      Receiver r5 type: [JAVAD TR_G3 ALPHA to]
      Receiver r6 type: [JAVAD TR_G3 ALPHA   ]
      Receiver r7 type: [JAVAD TR]
      Are r1 and r2 the same ? no
      Are r1 and r3 the same ? yes
      Are r1 and r4 the same ? no
      Size of receiver object = 21 bytes or 168 bits
      Is [JAVAD TR_G3 ALPHA   ] a valid name ? yes
      Is [JAVAD TR_G4 ALPHA] a valid name ? yes
      Is [JAVAD TR_G3 ALPHA   ] a valid name ? yes
      Is [ GEODETIC III L1/L2 ] a valid name ? yes <co xml:id="co.rec.bug"/>
      Is [JAVAD TR_G3 ALPHA to] a valid name ? no
      Is [JAVAD TR_G3 ALPHA   ] a valid name ? yes
      Is [JAVAD TR] a valid name ? yes
    </screen>
    <calloutlist>
      <callout arearefs="co.rec.bug"><para>This is a bug! The character '/' is not
          a valid receiver character.</para></callout>
    </calloutlist>
</para>
  </section>
</chapter>
